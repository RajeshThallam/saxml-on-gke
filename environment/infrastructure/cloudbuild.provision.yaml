# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: log parameters 
    name: 'hashicorp/terraform'
    entrypoint: 'sh' 
    args:
      - -c
      - |
          echo ENVIRONMENT SETTINGS:
          echo state_gcs_location=$_TF_STATE_BUCKET/$_TF_STATE_PREFIX
          echo project_id=$PROJECT_ID
          echo region=$_REGION
          echo zone=$_ZONE
          echo network_name=$_NETWORK_NAME
          echo subnet_name=$_SUBNET_NAME
          echo saxml_admin_bucket_name=$_SAXML_ADMIN_BUCKET_NAME
          echo repository_bucket_name=$_MODEL_REPOSITORY_BUCKET_NAME
          echo cluster_name=$_CLUSTER_NAME
          echo saxml_namespace=$_NAMESPACE
          echo tpu_type=$_TPU_TYPE
          echo num_tpu_pools=$_NUM_TPU_POOLS
          echo artifact_registry_name=$_ARTIFACT_REGISTRY_NAME
  - id: create tf state bucket
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'sh'
    args:
      - -c
      - |
          if ! [ $(gsutil ls | grep "gs://$_TF_STATE_BUCKET/") ]; then 
            gsutil mb -p ${PROJECT_ID} gs://$_TF_STATE_BUCKET
          fi
  - id: 'tf init'
    name: 'hashicorp/terraform'
    entrypoint: 'sh'
    dir: infrastructure/terraform
    args: 
    - '-c'
    - |
        terraform init -backend-config="bucket=$_TF_STATE_BUCKET" -backend-config="prefix=$_TF_STATE_PREFIX"

  - id: 'tf plan'
    name: 'hashicorp/terraform'
    entrypoint: 'sh'
    dir: infrastructure/terraform
    args: 
    - '-c'
    - |
        terraform plan \
        -var=project_id=$PROJECT_ID \
        -var=cluster_name=$_CLUSTER_NAME \
        -var=region=$_REGION \
        -var=zone=$_ZONE \
        -var=network_name=$_NETWORK_NAME \
        -var=subnet_name=$_SUBNET_NAME \
        -var=saxml_namespace=$_NAMESPACE \
        -var=repository_bucket_name=$_MODEL_REPOSITORY_BUCKET_NAME \
        -var=saxml_admin_bucket_name=$_SAXML_ADMIN_BUCKET_NAME \
        -var=tpu_type=$_TPU_TYPE \
        -var=num_tpu_pools=$_NUM_TPU_POOLS \
        -var=gke_sa_name=rt-gke-sa \
        -var=saxml_sa_name=rt-saxml-sa

  - id: 'tf apply'
    name: 'hashicorp/terraform'
    entrypoint: 'sh'
    dir: infrastructure/terraform
    args: 
    - '-c'
    - |
        terraform apply -auto-approve \
        -var=project_id=$PROJECT_ID \
        -var=cluster_name=$_CLUSTER_NAME \
        -var=region=$_REGION \
        -var=zone=$_ZONE \
        -var=network_name=$_NETWORK_NAME \
        -var=subnet_name=$_SUBNET_NAME \
        -var=saxml_namespace=$_NAMESPACE \
        -var=repository_bucket_name=$_MODEL_REPOSITORY_BUCKET_NAME \
        -var=saxml_admin_bucket_name=$_SAXML_ADMIN_BUCKET_NAME \
        -var=tpu_type=$_TPU_TYPE \
        -var=num_tpu_pools=$_NUM_TPU_POOLS \
        -var=gke_sa_name=rt-gke-sa \
        -var=saxml_sa_name=rt-saxml-sa

  - id: 'build sax checkpoint converter image'
    name: 'gcr.io/cloud-builders/docker'
    dir: applications/checkpoint_converter
    args: [ 'build', '-t', $_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_NAME/sax_ckpt_converter, '.' ]

  - id: 'build sax python client image'
    name: 'gcr.io/cloud-builders/docker'
    dir: applications/load_generator
    args: [ 'build', '-t', $_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_NAME/sax_client, '-f', 'src/Dockerfile', '.' ]